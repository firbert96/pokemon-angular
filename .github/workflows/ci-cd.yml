name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy-monolith:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image
      run: |
        docker build -f ci/Dockerfile -t pokemon-angular .

    - name: Check Docker Image
      run: |
        docker images

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Tag Docker Image
      run: |
        docker tag pokemon-angular ${{ secrets.DOCKER_USERNAME }}/pokemon-angular:latest

    - name: Push Docker Image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/pokemon-angular:latest

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-southeast-1' # Change this to your region

    - name: Decode SSH key
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        ls -l ~/.ssh/ec2_key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

    - name: Check file .pem
      run : |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} "echo 'Connected successfully'"

    - name: Create target directory on EC2
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} 'mkdir -p ~/app'

    - name: Install Docker on EC2 instance
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          # Update the package index
          sudo apt-get update

          # Install Docker dependencies
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

          # Add Dockerâ€™s official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

          # Add Docker repository
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          # Update the package index again
          sudo apt-get update

          # Install Docker
          sudo apt-get install -y docker-ce

          # Start Docker and enable it to start on boot
          sudo systemctl start docker
          sudo systemctl enable docker

          # Verify Docker installation
          docker --version
        EOF

    - name: Install Docker Compose on EC2 instance
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          # Download Docker Compose binary
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

          # Apply executable permissions to the binary
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify installation
          docker-compose --version
        EOF

    - name: Create or update docker-compose.yml file
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          cat <<EOF > docker-compose.yml
          # version: '3.8'
          services:
            web:
              image: ${{ secrets.DOCKER_USERNAME }}/pokemon-angular:latest  # Replace with the desired image from Docker Hub
              ports:
                - "4200:4200"
              networks:
                - default
          networks:
            default:
              name: pokemon-angular-network  # Name of the network for your services
        EOF

    - name: Check docker-compose.yml was created or updated
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          cat ~/docker-compose.yml
        EOF

    - name: Deploy to EC2 and Run Docker Compose
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
          ls -l /var/run/docker.sock
          sudo chmod 666 /var/run/docker.sock
          # Log in to Docker
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker pull ${{ secrets.DOCKER_USERNAME }}/pokemon-angular:latest
          docker-compose pull
          docker-compose up -d
        EOF

    - name: Check file from builded by docker
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
        cat ~/app/dist/pokemon-angular/browser

